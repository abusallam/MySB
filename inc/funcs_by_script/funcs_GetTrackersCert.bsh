#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    exit 0
}
##################### FIRST LINE #####################################

#### Check added torrents
gfnCheckAddedTorrents() {
    local sLine sProto sPrivacy sUser sInfoHash sShortAnnouncer sGivenHash
    local nCgiPort nTotalAnnouncers bToClean sUser
    local dDbDate tNow tDiff
    declare -A nCurrentCount
    [ -n "${1}" ] && sUser="${1}" || return 1
    if [ -n "${2}" ]; then
        sGivenHash="${2}"
    else
        echo "No hash given !"
        return 1
    fi

    # Add trackers
    grep "${sGivenHash}" "/home/.check_annoncers_${sUser}" | while read -r sLine; do
        #### VARs
        # Format: ${nCountAnnoncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}|${sAnnoncer}
        nTotalAnnouncers="$(echo "${sLine}" | cut -d '|' -f 1)"
        sInfoHash="${sGivenHash}"
        sPrivacy="$(echo "${sLine}" | cut -d '|' -f 3)"
        nCgiPort="$(echo "${sLine}" | cut -d '|' -f 4)"
        sShortAnnouncer="$(echo "${sLine}" | cut -d '|' -f 5)"
        sTracker="$(echo "${sLine}" | cut -d '|' -f 6)"
        sLineToDelete="${nTotalAnnouncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}"
        bToClean=0

        # Count annoucers
        [ -z "${nCurrentCount["${sInfoHash}"]}" ] && nCurrentCount["${sInfoHash}"]=0
        nCurrentCount["${sInfoHash}"]=$(("${nCurrentCount["${sInfoHash}"]}" + 1))

        # rTorrent progress message
        su -s /bin/bash "${sUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} \"${sAnnouncerCheck[*]} (${nCurrentCount["${sInfoHash}"]}/${nTotalAnnouncers}): ${sTracker} (${sPrivacy})\" >/dev/null"

        # Last check ?
        nBetweenUpdate=21600 # In seconds (6 hours)
        dDbDate="$(cmdMySQL 'MySB_db' "SELECT last_check FROM trackers_list WHERE tracker='$(echo "${sShortAnnouncer}" | cut -d ':' -f 1)' AND to_check='0';")"
        { [ "${dDbDate}" == "0000-00-00 00:00:00" ] || [ -z "${dDbDate}" ]; } && {
            dDbDate="$(date +%Y-%m-%d\ %H:%M:%S)"
            tDiff=$((nBetweenUpdate + 1))
        }
        dDbDate=$(date '+%s' --date="${dDbDate}")
        tNow=$(date '+%s' --date="$(date +%Y-%m-%d\ %H:%M:%S)")
        [ -z "${tDiff}" ] && tDiff=$((tNow - dDbDate))
        if [[ ${tDiff} -gt ${nBetweenUpdate} ]]; then
            # Try to add tracker & announcers
            gfnAddTracker "${sLine}" "${sUser}"
            # Get certificates
            gfnGetCertificates ""
            # Clean file
            bToClean=1
        else
            # Clean file
            bToClean=1
        fi

        # Clean file
        if [[ ${bToClean} -eq 1 ]] && [ -f "/home/.check_annoncers_${sUser}" ] && [ -n "${sLineToDelete}" ]; then
            sed -i "/${sLineToDelete}/d" "/home/.check_annoncers_${sUser}"
        fi

        # Check if there are any entries for the current hash
        if (! grep -q "${sInfoHash}" "/home/.check_annoncers_${sUser}"); then
            # Enable/Disable annoncers
            gfnAnnoncerActivate "${sUser}" "${sInfoHash}" "${nTotalAnnouncers}"
        fi
    done

    # Send mail to mainuser for annoncers added
    gfnSendMail "${AnnoncersAddedMailSubject}" "${gsMainUserName}" "announcers_added"

    # Force execute of finish script when a torrent recycling is present !
    rm -fv "/tmp/GetTrackersCert_${sUser}_${sGivenHash}.lock"
}

#### Restore validated annoncers
gfnAnnoncerActivate() {
    local nFnCgiPort sFnInfoHash sFnId sFnUser bFnIsActive aFnValidated aFnUnvalidated sFnRequest sFnValue sFnTorrent bFnIsStart nFnCount
    local sProto sURL sUrlUser sHostPort sHost sPort sFnResult sFnGetUrl
    [ -n "${1}" ] && sFnUser="${1}" || return 1
    [ -n "${2}" ] && sFnInfoHash="${2}" || return 1
    [ -n "${3}" ] && nFnCount="${3}" || return 1
    aFnValidated=()
    aFnUnvalidated=()

    sFnRequest="$(cmdMySQL 'MySB_db' "SELECT scgi_port,id FROM annoncers WHERE user='${sFnUser}' AND info_hash='${sFnInfoHash}';" | sed 's/\t/|/g;')"
    for sFnValue in ${sFnRequest}; do
        nFnCgiPort="$(echo "${sFnValue}" | awk '{split($0,a,"|"); print a[1]}')"
        sFnId="$(echo "${sFnValue}" | awk '{split($0,a,"|"); print a[2]}')"
        sFnGetUrl="$(su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} t.url ${sFnInfoHash}:${sFnId} 2>/dev/null")"
        if [ -n "${sFnGetUrl}" ]; then
            echo "Checking: ${sFnGetUrl}"
            sProto="$(echo "${sFnGetUrl}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')" # extract the protocol
            sURL="${sFnGetUrl//${sProto}/}"
            sUrlUser="$(echo "${sURL}" | grep @ | cut -d@ -f1)"                                               # extract the user (if any)
            sHostPort="$(echo "${sURL//${sUrlUser}@/}" | cut -d/ -f1)"                                        # extract the host and port
            sHost="${sHostPort//:*/}"                                                                         # by request host without port
            sPort="$(echo "${sHostPort}" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')" # by request - try to extract the port
            case ${sPort#[-+]} in
                *[!0-9]* | '')
                    case "${sProto//:\/\//}" in
                        'http' | 'udp') sPort=80 ;;
                        'https') sPort=443 ;;
                    esac
                    ;;
            esac

            # Get if activate
            bFnIsActive="$(cmdMySQL 'MySB_db' "SELECT is_active FROM trackers_list WHERE tracker='${sHost}' AND tracker_proto='${sProto//:\/\//}' AND tracker_port='${sPort}';")"
            bFnIsActive="${bFnIsActive:-1}"
            su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} t.is_enabled.set ${sFnInfoHash}:${sFnId} ${bFnIsActive} >/dev/null"
            if [[ ${bFnIsActive} -eq 1 ]]; then
                sFnResult="Enabled"
                aFnValidated+=("${nFnCgiPort}|${sFnInfoHash}")
            else
                aFnUnvalidated+=("${nFnCgiPort}|${sFnInfoHash}")
                sFnResult="Disabled"
            fi
            echo "${sFnResult}: ${sFnGetUrl}"
        else
            echo "sFnGetUrl is empty !!!"
        fi
        cmdMySQL 'MySB_db' "DELETE FROM annoncers WHERE scgi_port='${nFnCgiPort}' AND info_hash='${sFnInfoHash}' AND id='${sFnId}' AND user='${sFnUser}';" -v
    done

    # Uniq
    [ "${#aFnValidated[*]}" -gt 0 ] && mapfile -t aFnValidated < <(echo "${aFnValidated[*]}" | tr ' ' '\n' | sort | uniq)
    [ "${#aFnUnvalidated[*]}" -gt 0 ] && mapfile -t aFnUnvalidated < <(echo "${aFnUnvalidated[*]}" | tr ' ' '\n' | sort | uniq)

    # Start validated torrents
    for sFnTorrent in "${aFnValidated[@]}"; do
        nFnCgiPort="$(echo "${sFnTorrent}" | awk '{split($0,a,"|"); print a[1]}')"
        sFnInfoHash="$(echo "${sFnTorrent}" | awk '{split($0,a,"|"); print a[2]}')"

        # rTorrent progress message
        su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.custom2.set ${sFnInfoHash} \"${sAnnoncersLoadingOk[*]}\" >/dev/null"

        # Start it if possible
        bFnIsStart="$(su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.custom5 ${sFnInfoHash} 2>/dev/null" | cut -d ':' -f 1)"
        [ -z "${bFnIsStart}" ] && bFnIsStart=1
        if [[ ${bFnIsStart} -eq 1 ]]; then
            su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.start ${sFnInfoHash} >/dev/null"
            # su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.open ${sFnInfoHash} >/dev/null"
        else
            su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.open ${sFnInfoHash} >/dev/null"
        fi

        # Session saving
        su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} session.save ${sFnInfoHash} >/dev/null"
    done
    # Close unvalidated torrents
    for sFnTorrent in "${aFnUnvalidated[@]}"; do
        if [[ ${#aFnUnvalidated[*]} -eq ${nFnCount} ]]; then
            nFnCgiPort="$(echo "${sFnTorrent}" | awk '{split($0,a,"|"); print a[1]}')"
            sFnInfoHash="$(echo "${sFnTorrent}" | awk '{split($0,a,"|"); print a[2]}')"

            # rTorrent progress message
            su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.custom2.set ${sFnInfoHash} \"${sAnnoncersAllDisabled[*]}\" >/dev/null"

            # We close torrent
            su -s /bin/bash "${sFnUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nFnCgiPort} d.close ${sFnInfoHash} >/dev/null"
        fi
    done
}

#### Add new trackers
gfnAddTracker() {
    local sFnPrivacy sFnTracker sPart1 sPart2 sPart3 sFnTrackerDomain sFnTrackerAddress sIfExist sFnTrackersListId sUser sLine
    local sFnProto sFnURL sFnUrlUser sFnHostPort sFnHost sFnPort sPglcmlTemp bToCheck
    local dDbDate tNow tDiff aTrackerIPv4 bAutoBlockAnnoncers

    sLine="${1}"
    if [ -n "${2}" ] && [ -n "$(getent passwd "${2}")" ]; then
        sUser="${2}"
    fi

    aTrackerIPv4=()
    bAutoBlockAnnoncers="$(cmdMySQL 'MySB_db' "SELECT block_annoncers FROM system WHERE id_system='1';")"

    if [ -n "${sLine}" ]; then
        # ${nCountAnnoncers}|${sInfoHash}|${sPrivacy}|${nCgiPort}|${sShortAnnouncer}|${sAnnoncer}
        sFnPrivacy="$(echo "${sLine}" | cut -d '|' -f 3)"
        sFnTracker="$(echo "${sLine}" | cut -d '|' -f 6)"

        # extract the protocol
        sFnProto="$(echo "${sFnTracker}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
        [ -z "${sFnProto}" ] && sFnProto="http://"
        # remove the protocol
        sFnURL="${sFnTracker//${sFnProto}/}"
        sFnProto="${sFnProto//:\/\//}"
        # extract the user (if any)
        sFnUrlUser="$(echo "${sFnURL}" | grep @ | cut -d@ -f1)"
        # extract the host and port
        sFnHostPort="$(echo "${sFnURL//${sFnUrlUser}@/}" | cut -d/ -f1)"
        # by request host without port
        sFnHost="${sFnHostPort//:*/}"
        # by request - try to extract the port
        sFnPort="$(echo "${sFnHostPort}" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
        case ${sFnPort#[-+]} in
            *[!0-9]* | '')
                case "${sFnProto}" in
                    'http' | 'udp') sFnPort=80 ;;
                    'https') sFnPort=443 ;;
                esac
                ;;
        esac
        # extract the path (if any)
        # sURI="$(echo "${sFnURL}" | grep '/' | cut -d/ -f2-)"
        # hostname & domain
        sPart1="$(echo "${sFnHost}" | cut -d "." -f 1)"
        sPart2="$(echo "${sFnHost}" | cut -d "." -f 2)"
        sPart3="$(echo "${sFnHost}" | cut -d "." -f 3)"
        if [ -z "${sPart3}" ]; then
            sFnTrackerDomain="${sPart1}.${sPart2}"
            sFnTrackerAddress="${sFnTrackerDomain}"
        else
            sFnTrackerDomain="${sPart2}.${sPart3}"
            sFnTrackerAddress="${sPart1}.${sFnTrackerDomain}"
        fi

        # DEBUG
        # {
        #     echo "sFnPrivacy $sFnPrivacy"
        #     echo "sFnTracker $sFnTracker"
        #     echo "sFnProto $sFnProto"
        #     echo "sFnURL $sFnURL"
        #     echo "sFnUrlUser $sFnUrlUser"
        #     echo "sFnHostPort $sFnHostPort"
        #     echo "sFnHost $sFnHost"
        #     echo "sFnPort $sFnPort"
        #     echo "sURI $sURI"
        #     echo "sParts ${sPart1} ${sPart2} ${sPart3}"
        #     echo "sFnTrackerDomain $sFnTrackerDomain"
        #     echo "sFnTrackerAddress $sFnTrackerAddress"
        #     echo
        # } >${MySB_InstallDir}/logs/${gsScriptName}_debug.log

        # 1/ Check tracker address
        if [ -n "${sFnTrackerAddress}" ]; then
            bForceUpdate=0
            case "${sFnProto}" in
                'http' | 'https') bToCheck=1 ;;
                'udp') bToCheck=0 ;;
            esac

            # Checking DNS
            mapfile -t aTrackerIPv4 < <(nslookup -type=A github.com | grep 'Address:' | awk '{ print $2 }' | tail -n +2 | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)
            if [ "${#aTrackerIPv4[@]}" -eq 0 ]; then
                gfnSwitchDNS "dnscrypt"
                sleep 2
            fi

            mapfile -t aTrackerIPv4 < <(nslookup -type=A "${sFnTrackerAddress}" | grep 'Address:' | awk '{ print $2 }' | tail -n +2 | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq)

            if [ "${#aTrackerIPv4[@]}" -gt 0 ]; then
                # Add address if needed
                sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sFnTrackerAddress}';")"
                if [ -z "$sIfExist" ]; then
                    log_daemon_msg "${AddTrackerDomain} ${sFnTrackerAddress}:${sFnPort}"

                    case "${sFnProto}" in
                        'http' | 'https')
                            cmdMySQL 'MySB_db' "INSERT INTO trackers_list (tracker,tracker_domain,tracker_proto,tracker_port,tracker_uri,privacy,is_active,to_check) VALUES ('${sFnTrackerAddress}','${sFnTrackerDomain}','${sFnProto}','${sFnPort}','','${sFnPrivacy}','1','1');"
                            ;;
                        'udp')
                            cmdMySQL 'MySB_db' "INSERT INTO trackers_list (tracker,tracker_domain,tracker_proto,tracker_port,tracker_uri,privacy,is_active,to_check,last_check) VALUES ('${sFnTrackerAddress}','${sFnTrackerDomain}','${sFnProto}','${sFnPort}','','${sFnPrivacy}','1','0','$(date +%Y-%m-%d\ %H:%M:%S)');"
                            ;;
                    esac

                    echo "${sFnProto%://}://${sFnTrackerAddress}:${sFnPort} (${sFnPrivacy})" >>"${gsMailContentTemp}"
                    gfnStatusLSB
                else
                    log_daemon_msg "${UpdateTrackerDomain} ${sFnTrackerAddress}:${sFnPort}"
                    cmdMySQL 'MySB_db' "UPDATE trackers_list SET tracker_port='${sFnPort}' WHERE tracker='${sFnTrackerAddress}';"
                    gfnStatusLSB
                fi

                # Add address IPv4 and clean if needed
                sFnTrackersListId="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sFnTrackerAddress}';")"
                if [ -n "${sFnTrackersListId}" ] && [ "${sFnTrackersListId}" -gt 0 ]; then
                    log_daemon_msg "${UpdateTrackersIPv4} '${sFnTrackerAddress}' --> '${aTrackerIPv4[*]}'"
                    # Cleaning
                    ListIPv4="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM trackers_list_ipv4 WHERE id_trackers_list='${sFnTrackersListId}';")"
                    for IPv4 in ${ListIPv4}; do
                        if (! grep -q "${IPv4}" <<<"${aTrackerIPv4[*]}"); then
                            cmdMySQL 'MySB_db' "DELETE FROM trackers_list_ipv4 WHERE ipv4='${IPv4}' AND id_trackers_list='${sFnTrackersListId}';"
                            cmdMySQL 'MySB_db' "UPDATE trackers_list SET to_check='${bToCheck}' WHERE id_trackers_list='${sFnTrackersListId}';"
                            bForceUpdate=1
                        fi
                    done
                    unset IPv4 ListIPv4
                    # Add
                    for IPv4 in "${aTrackerIPv4[@]}"; do
                        case "${IPv4}" in
                            '127.0.0.1' | '0.0.0.0') continue ;;
                            *)
                                nBetweenUpdate=3600 # In seconds
                                dDbDate="$(cmdMySQL 'MySB_db' "SELECT last_check FROM trackers_list_ipv4 WHERE id_trackers_list='${sFnTrackersListId}' AND ipv4='${IPv4}';")"
                                { [ "${dDbDate}" == "0000-00-00 00:00:00" ] || [ -z "${dDbDate}" ]; } && {
                                    dDbDate="$(date +%Y-%m-%d\ %H:%M:%S)"
                                    tDiff=$((nBetweenUpdate + 1))
                                }
                                dDbDate=$(date '+%s' --date="${dDbDate}")
                                tNow=$(date '+%s' --date="$(date +%Y-%m-%d\ %H:%M:%S)")
                                [ -z "${tDiff}" ] && tDiff=$((tNow - dDbDate))

                                # PeerGuardian check blocked IP
                                bToBlock=0
                                if [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
                                    sPglcmlTemp="$(mktemp /tmp/"${gsScriptName}"."${sUser}".pglcmd.XXXXXXXXXX)"
                                    pglcmd search "${IPv4}" >"${sPglcmlTemp}"
                                    sed -i "/${IPv4}/d" "${sPglcmlTemp}"
                                    sed -i '/^$/d' "${sPglcmlTemp}"
                                    sed -i "/If you don't want to block the above shown ranges/d" "${sPglcmlTemp}"
                                    sed -i "/Or you may remove some of these lists from/d" "${sPglcmlTemp}"
                                    [ -s "${sPglcmlTemp}" ] && bToBlock=1
                                    rm -f "${sPglcmlTemp}"
                                fi

                                if [[ ${tDiff} -gt ${nBetweenUpdate} ]] || [[ ${bToBlock} -eq 1 ]] || [[ ${bForceUpdate} -eq 1 ]]; then
                                    sPingResult="$(ping -c2 -w3 "${IPv4}" | grep 'packets transmitted' | cut -d ',' -f 3)"

                                    sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list_ipv4 FROM trackers_list_ipv4 WHERE id_trackers_list='${sFnTrackersListId}' AND ipv4='${IPv4}';")"
                                    if [ -z "$sIfExist" ]; then
                                        cmdMySQL 'MySB_db' "INSERT INTO trackers_list_ipv4 (id_trackers_list,ipv4,pgl_banned,ping,last_check) VALUES ('${sFnTrackersListId}','${IPv4}','${bToBlock}','${sPingResult}','$(date +%Y-%m-%d\ %H:%M:%S)');"
                                        cmdMySQL 'MySB_db' "UPDATE trackers_list SET to_check='${bToCheck}' WHERE id_trackers_list='${sFnTrackersListId}';"
                                    else
                                        cmdMySQL 'MySB_db' "UPDATE trackers_list_ipv4 SET pgl_banned='${bToBlock}', ping='${sPingResult}', last_check='$(date +%Y-%m-%d\ %H:%M:%S)' WHERE ipv4='${IPv4}' AND id_trackers_list='${sFnTrackersListId}';"
                                    fi

                                    bActive="$(cmdMySQL 'MySB_db' "SELECT is_active FROM trackers_list WHERE tracker='${sFnTrackerAddress}';")"
                                    if [[ ${bAutoBlockAnnoncers} -eq 1 ]] && [[ ${bToBlock} -eq 1 ]]; then
                                        bActive=0
                                    fi
                                fi
                                ;;
                        esac
                    done
                    unset IPv4 aTrackerIPv4
                    if [[ ${tDiff} -gt ${nBetweenUpdate} ]] || [[ ${bToBlock} -eq 1 ]] || [[ ${bForceUpdate} -eq 1 ]]; then
                        cmdMySQL 'MySB_db' "UPDATE trackers_list SET tracker_domain='${sFnTrackerDomain}', is_active='${bActive}' WHERE tracker='${sFnTrackerAddress}';"
                    fi
                    gfnStatusLSB
                fi
            else
                sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sFnTrackerAddress}';")"
                if [ -n "$sIfExist" ]; then
                    log_daemon_msg "${DeleteTracker} ${sFnTrackerAddress}"
                    cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_dead='1', is_active='0' WHERE tracker='${sFnTrackerAddress}';"
                    gfnStatusLSB
                fi
            fi
        fi
    fi
}

gfnGetCertificates() {
    local bAutoBlockAnnoncers bDoRehash bToCheck bRemoveAfter bIsBanned bSsl
    local TrackersList Tracker TrackersID sValues IPv4 sRequestValues sTrackerProto sTrackerPort sCheckPort sArg
    local nBetweenUpdate
    local dDbDate tDiff tNow dExpirationDate

    bAutoBlockAnnoncers="$(cmdMySQL 'MySB_db' "SELECT block_annoncers FROM system WHERE id_system='1';")"
    TrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker FROM trackers_list WHERE to_check='1';")"
    bDoRehash=0
    [ -n "${1}" ] && sArg="${1}"

    for Tracker in ${TrackersList}; do
        # Lock current research to avoid concurrent processing
        cmdMySQL 'MySB_db' "UPDATE trackers_list SET to_check='3' WHERE tracker='${Tracker}';"
        bToCheck=1
        # Last check ?
        nBetweenUpdate=21600 # In seconds (6 hours)
        dDbDate="$(cmdMySQL 'MySB_db' "SELECT last_check FROM trackers_list WHERE tracker='${Tracker}';")"
        { [ "${dDbDate}" == "0000-00-00 00:00:00" ] || [ -z "${dDbDate}" ]; } && {
            dDbDate="$(date +%Y-%m-%d\ %H:%M:%S)"
            tDiff=$((nBetweenUpdate + 1))
        }
        dDbDate=$(date '+%s' --date="${dDbDate}")
        tNow=$(date '+%s' --date="$(date +%Y-%m-%d\ %H:%M:%S)")
        [ -z "${tDiff}" ] && tDiff=$((tNow - dDbDate))

        if [ "${sArg}" == "FORCE" ] || [[ ${tDiff} -gt ${nBetweenUpdate} ]]; then
            log_daemon_msg "${GetCertificateFor} ${Tracker}"
            if [ "${gbIsInstalled_PeerGuardian}" == "YES" ] && [ -f /etc/pgl/allow.p2p ]; then
                bRemoveAfter=0
                TrackersID="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${Tracker}';")"
                sValues="$(cmdMySQL 'MySB_db' "SELECT ipv4,pgl_banned FROM trackers_list_ipv4 WHERE id_trackers_list='${TrackersID}';" | sed 's/\t/|/g;')"
                sed -i "/${Tracker}/d" /etc/pgl/allow.p2p
                if [ -n "${sValues}" ]; then
                    for sValue in ${sValues}; do
                        IPv4="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[1]}')"
                        bIsBanned="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[2]}')"
                        if [[ ${bAutoBlockAnnoncers} -eq 1 ]] && [[ ${bIsBanned} -eq 1 ]]; then
                            echo "#${Tracker}:${IPv4}-255.255.255.255 (banned by PeerGuardian !)" >>/etc/pgl/allow.p2p
                            bRemoveAfter=1
                        else
                            echo "${Tracker}:${IPv4}-255.255.255.255" >>/etc/pgl/allow.p2p
                        fi
                    done
                else
                    bRemoveAfter=1
                fi
            fi

            cd "${MySB_InstallDir}"/ssl/trackers/ || exit
            sRequestValues="$(cmdMySQL 'MySB_db' "SELECT tracker_proto,tracker_port FROM trackers_list WHERE tracker='${Tracker}';" | sed 's/\t/|/g;')"
            sTrackerProto="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[1]}')"
            sTrackerPort="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[2]}')"
            dExpirationDate="0000-00-00"
            sCheckPort="${sTrackerPort}"
            bSsl=0
            bToCheck=0

            # if [ ! -h /etc/ssl/certs/"${Tracker}".pem ] || [ ! -f "${MySB_InstallDir}/ssl/trackers/${Tracker}.pem" ] || [ "${2}" == "FORCE" ]; then
            timeout 10 bash -c "openssl s_client -connect ${Tracker}:${sCheckPort} </dev/null 2>/dev/null | sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' >> ./${Tracker}.crt"
            if [ -s ./"${Tracker}".crt ]; then
                openssl x509 -in ./"${Tracker}".crt -out ./"${Tracker}".der -outform DER
                openssl x509 -in ./"${Tracker}".der -inform DER -out ./"${Tracker}".pem -outform PEM
                if [ -s ./"${Tracker}".pem ]; then
                    if [ -f /etc/ssl/certs/"${Tracker}".pem ] || [ -h /etc/ssl/certs/"${Tracker}".pem ]; then
                        rm -f /etc/ssl/certs/"${Tracker}".pem
                    fi
                    chmod 0644 "${MySB_InstallDir}/ssl/trackers/${Tracker}.pem"
                    ln -s "${MySB_InstallDir}/ssl/trackers/${Tracker}.pem" /etc/ssl/certs/"${Tracker}".pem
                    # Extract certificate expiration date
                    dExpirationDate="$(openssl x509 -enddate -noout -in ./"${Tracker}".pem | cut -d "=" -f 2)"
                    dExpirationDate="$(date -d "$dExpirationDate" '+%Y-%m-%d')"
                    dExpirationDate="$(date --date "$dExpirationDate 2 days ago" '+%Y-%m-%d')"
                    sTrackerPort="${sCheckPort}"
                    sTrackerProto="https"
                    bSsl=1
                    bDoRehash=1
                else
                    rm ./"${Tracker}".pem
                fi
                rm -f ./"${Tracker}".der
            fi
            # else
            #     chmod 0644 "${MySB_InstallDir}/ssl/trackers/${Tracker}.pem"
            # fi
            rm -f ./"${Tracker}".crt

            # Update database
            cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_ssl='${bSsl}', cert_expiration='${dExpirationDate}', to_check='${bToCheck}', tracker_proto='${sTrackerProto}', tracker_port='${sTrackerPort}', last_check='$(date +%Y-%m-%d\ %H:%M:%S)' WHERE tracker='${Tracker}';"

            if [ "${gbIsInstalled_PeerGuardian}" == "YES" ] && [ -f /etc/pgl/allow.p2p ]; then
                [[ ${bRemoveAfter} -eq 1 ]] && sed -i "/${Tracker}/d" /etc/pgl/allow.p2p
                pglcmd reload >/dev/null
            fi
            gfnStatusLSB
        fi

        # Restore to_check status if needed
        [[ ${bToCheck} -eq 1 ]] && cmdMySQL 'MySB_db' "UPDATE trackers_list SET to_check='1' WHERE tracker='${Tracker}';"

        unset nBetweenUpdate dDbDate tDiff tNow
    done

    #### Create again certificates listing in system
    if [ "$bDoRehash" -eq 1 ]; then
        log_daemon_msg "$CertificateRehash"
        c_rehash "${MySB_InstallDir}"/ssl/trackers/ &>/dev/null
        c_rehash /etc/ssl/certs/ &>/dev/null
        update-ca-certificates --fresh &>/dev/null
        gfnStatusLSB
    fi
}

##################### LAST LINE ######################################
